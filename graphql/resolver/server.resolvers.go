package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	graph "github.com/minkezhang/truffle/api/graphql"
	"github.com/minkezhang/truffle/api/graphql/model"
	"github.com/minkezhang/truffle/util"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Patch is the resolver for the Patch field.
func (r *mutationResolver) Patch(ctx context.Context, input *model.PatchInput) (*model.Entry, error) {
	var id string
	if input.ID != nil && *input.ID != "" {
		id = *input.ID
	} else {
		input.ID = nil
		id = util.UUID()
		// TODO(minkezhang): Check for duplicate.
	}

	m, err := r.DB.Entry.Get(ctx, id)
	if err != nil {
		m = &model.Entry{
			ID:     id,
			Corpus: *input.Corpus,
		}
	}
	if err := util.PatchEntry(m, input); err != nil {
		return nil, err
	}

	return r.DB.Entry.Put(ctx, m)
}

// Delete is the resolver for the delete field.
func (r *mutationResolver) Delete(ctx context.Context, input string) (*model.Entry, error) {
	return r.DB.Entry.Delete(ctx, input)
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context, input *model.ListInput) ([]*model.Entry, error) {
	if input.ID != nil {
		e, err := r.DB.Entry.Get(ctx, *input.ID)
		if err != nil {
			return nil, nil
		}
		return []*model.Entry{e}, nil
	}

	return nil, &gqlerror.Error{
		Path:    graphql.GetPath(ctx),
		Message: fmt.Sprintf("Search not found: %s", *input.ID),
		Extensions: map[string]interface{}{
			"code": 404,
		},
	}
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	graph "github.com/minkezhang/truffle/graphql/generated"
	"github.com/minkezhang/truffle/graphql/generated/model"
	"github.com/minkezhang/truffle/util"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Put is the resolver for the Put field.
func (r *mutationResolver) Put(ctx context.Context, input *model.PutInput) (*model.Entry, error) {
	var id string
	if input.ID != nil && *input.ID != "" {
		id = *input.ID
	} else {
		input.ID = nil
		id = util.UUID()
	}
	// TODO(minkezhang): Get Entry object here.
	m := &model.Entry{
		ID:     id,
		Corpus: *input.Corpus,
	}

	if err := PUTEntry(input, m); err != nil {
		return nil, err
	}

	// TODO(minkezhang): Save Search object.
	return m, nil
}

// Search is the resolver for the Search field.
func (r *queryResolver) Search(ctx context.Context, input *model.SearchInput) ([]*model.Entry, error) {
	return nil, &gqlerror.Error{
		Path:    graphql.GetPath(ctx),
		Message: fmt.Sprintf("Search not found: %s", *input.ID),
		Extensions: map[string]interface{}{
			"code": 404,
		},
	}
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

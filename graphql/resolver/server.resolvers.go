package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	graph "github.com/minkezhang/truffle/api/graphql"
	"github.com/minkezhang/truffle/api/graphql/model"
	"github.com/minkezhang/truffle/util"
)

// Patch is the resolver for the Patch field.
func (r *mutationResolver) Patch(ctx context.Context, input *model.PatchInput) (*model.Entry, error) {
	var id string
	if input.ID != nil && *input.ID != "" {
		id = *input.ID
	} else {
		input.ID = nil
		id = util.UUID()
		// TODO(minkezhang): Check for duplicate.
	}

	m, err := r.DB.Entry.Get(ctx, &model.Entry{
		ID: id,
	})
	if err != nil {
		m = &model.Entry{
			ID: id,
		}
	}
	if err := util.PatchEntry(m, input); err != nil {
		return nil, err
	}

	return r.DB.Entry.Put(ctx, m)
}

// Delete is the resolver for the delete field.
func (r *mutationResolver) Delete(ctx context.Context, input string) (*model.Entry, error) {
	return r.DB.Entry.Delete(ctx, input)
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context, input *model.ListInput) ([]*model.Entry, error) {
	if input.ID != nil {
		e, err := r.DB.Entry.Get(ctx, &model.Entry{
			ID: *input.ID,
		})
		if err != nil {
			return nil, nil
		}
		return []*model.Entry{e}, nil
	}

	entries, _ := r.DB.Entry.List(ctx, input)
	lookup := map[model.APIType]map[string]bool{}
	for _, e := range entries {
		for _, d := range e.Metadata.Sources {
			if lookup[d.API] == nil {
				lookup[d.API] = map[string]bool{}
			}
			lookup[d.API][d.ID] = true
		}
	}

	corpora := map[model.CorpusType]bool{}
	for _, c := range input.Corpora {
		corpora[c] = true
	}

	// Query all APIs.
	data := []*model.APIData{}
	for _, api := range input.Apis {
		d, err := r.DB.APIData[api].List(ctx, input)
		if err != nil {
			return nil, err
		}
		data = append(data, d...)
	}

	var pseudo []*model.Entry
	for _, d := range data {
		// Deduplicate data.
		if l := lookup[d.API]; l != nil {
			if _, ok := l[d.ID]; ok {
				continue
			}
		}

		// Filter out corpora.
		if _, ok := corpora[d.Corpus]; !ok {
			continue
		}

		pseudo = append(pseudo, &model.Entry{
			ID: "",
			Metadata: &model.Metadata{
				Truffle: &model.APIData{},
				Sources: []*model.APIData{d},
			},
		})
	}

	return append(entries, pseudo...), nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

input ListInput {
  # Entry ID
  id: ID

  corpus: CorpusType
  title: String
  corpora: [CorpusType!]
  apis: [APIType!]

  mal: ListInputMAL
}

input ListInputMAL {
  nsfw: Boolean!
}

input PatchInputAPISource {
  api: APIType!
  id: ID!
}

# Most fields for the Aux union type are not represented here for simplicity.
# We will rely on APIs to populate the data instead.
input PatchInputAux {
  # Used for populating AuxAnime and AuxAnimeFilm
  studios: [String!]

  # Used for populating AuxBook, AuxManga, and AuxShortStory
  authors: [String!]

  # Used for populating AuxAlbum
  composers: [String!]

  # Used for populating AuxFilm
  directors: [String!]

  # Used for populating AuxGame
  developers: [String!]
}

input PatchInputTitle {
  locale: String!
  title: String!
}

input PatchInputTracker {
  # Used for populating TrackerAnime and TrackerTV
  season: String
  episode: String

  # Used for populating TrackerManga and TrackerBook
  volume: String

  # Used for populating TrackerManga
  chapter: String
}

input PatchInput {
  # Optional; if ID is null, create the entry
  id: ID

  # Custom metadata
  corpus: CorpusType
  queued: Boolean
  titles: [PatchInputTitle!]
  score: Float
  providers: [ProviderType!]
  tags: [String!]
  aux: PatchInputAux
  tracker: PatchInputTracker

  sources: [PatchInputAPISource!]
}

type Query {
  list(input: ListInput): [Entry!]
}

type Mutation {
  patch(input: PatchInput): Entry
  delete(input: ID!): Entry
}

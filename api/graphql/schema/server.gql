input SearchInput {
  # Entry ID
  id: ID

  corpus: CorpusType
  pattern: String
  apis: [APIType!]

  nsfw: Boolean
}

input EntryInputAPISource {
  api: APIType!
  id: ID!
}

# Most fields for the Aux union type are not represented here for simplicity.
# We will rely on APIs to populate the data instead.
input EntryInputAux {
  # Used for populating AuxAnime and AuxAnimeFilm.
  studios: [String!]

  # Used for populating AuxBook, AuxManga, and AuxShortStory.
  authors: [String!]

  # Used for populating AuxAlbum.
  composers: [String!]

  # Used for populating AuxFilm.
  directors: [String!]

  # Used for populating AuxGame.
  developers: [String!]
}

input EntryInputTitle {
  language: String!
  title: String!
}

input PutInput {
  # Optional; if ID is null, create the entry.
  id: ID

  corpus: CorpusType

  # Custom metadata
  queued: Boolean
  titles: [EntryInputTitle!]
  score: Float
  providers: [ProviderType!]
  tags: [String!]
  aux: EntryInputAux

  sources: [EntryInputAPISource!]
}

type Query {
  search(input: SearchInput): [Entry!]
}

type Mutation {
  put(input: PutInput): Entry
}
